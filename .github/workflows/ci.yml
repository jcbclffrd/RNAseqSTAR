name: RNAseq STAR Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Job 1: Test Docker Build
  docker-build:
    runs-on: ubuntu-latest
    name: Test Docker Build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t scte-pipeline:test .
        
    - name: Test Docker image
      run: |
        # Test that required tools are installed
        docker run --rm scte-pipeline:test which STAR
        docker run --rm scte-pipeline:test which samtools
        docker run --rm scte-pipeline:test which prefetch
        docker run --rm scte-pipeline:test which wget
        
    - name: Test STAR version
      run: |
        docker run --rm scte-pipeline:test STAR --version

  # Job 2: Validate Scripts
  validate-scripts:
    runs-on: ubuntu-latest
    name: Validate Pipeline Scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check script permissions
      run: |
        ls -la *.sh
        [ -x docker_build.sh ] || exit 1
        [ -x docker_run_pipeline.sh ] || exit 1
        [ -x scripts/run_full_pipeline.sh ] || exit 1
        
    - name: Validate shell scripts with shellcheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'
        
    - name: Test script syntax
      run: |
        bash -n docker_build.sh
        bash -n docker_run_pipeline.sh  
        bash -n scripts/run_full_pipeline.sh

  # Job 3: Documentation Check
  docs-check:
    runs-on: ubuntu-latest
    name: Documentation Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README exists and is not empty
      run: |
        [ -f README.md ] || exit 1
        [ -s README.md ] || exit 1
        
    - name: Validate markdown
      uses: github/super-linter/slim@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_MARKDOWN: true

  # Job 4: Pipeline Dry Run (Mock Test)
  pipeline-dry-run:
    runs-on: ubuntu-latest
    name: Pipeline Dry Run Test
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t scte-pipeline:test .
      
    - name: Create test directories
      run: |
        mkdir -p test_data test_reference test_results test_genome
        
    - name: Test pipeline script execution (dry run)
      run: |
        # Create a minimal test script that checks directory structure
        cat > test_pipeline_structure.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "Testing pipeline directory structure..."
        
        # Check that required directories exist in container
        [ -d /workspace/data ] || exit 1
        [ -d /workspace/reference ] || exit 1
        [ -d /workspace/results ] || exit 1
        [ -d /workspace/genome_index ] || exit 1
        [ -d /workspace/scripts ] || exit 1
        
        # Check that pipeline script exists and is executable
        [ -x /workspace/scripts/run_full_pipeline.sh ] || exit 1
        
        # Test script syntax
        bash -n /workspace/scripts/run_full_pipeline.sh
        
        echo "Pipeline structure validation passed!"
        EOF
        
        chmod +x test_pipeline_structure.sh
        
        # Run structure test in container
        docker run --rm \
          -v $PWD/test_pipeline_structure.sh:/test_pipeline_structure.sh \
          scte-pipeline:test \
          /test_pipeline_structure.sh

  # Job 5: Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t scte-pipeline:test .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'scte-pipeline:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 6: Release (only on tags)
  release:
    runs-on: ubuntu-latest
    name: Create Release Assets
    needs: [docker-build, validate-scripts, docs-check, pipeline-dry-run]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t scte-pipeline:${{ github.ref_name }} .
      
    - name: Save Docker image
      run: |
        docker save scte-pipeline:${{ github.ref_name }} | gzip > scte-pipeline-${{ github.ref_name }}.tar.gz
        
    - name: Create release archive
      run: |
        tar -czf rnaseq-star-pipeline-${{ github.ref_name }}.tar.gz \
          --exclude='.git' \
          --exclude='data' \
          --exclude='reference' \
          --exclude='results' \
          --exclude='GenomeDir' \
          .
        
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./rnaseq-star-pipeline-${{ github.ref_name }}.tar.gz
        asset_name: rnaseq-star-pipeline-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  # Job 7: Notification
  notify:
    runs-on: ubuntu-latest
    name: Notify Build Status
    needs: [docker-build, validate-scripts, docs-check, pipeline-dry-run, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.docker-build.result == 'success' && needs.validate-scripts.result == 'success' && needs.docs-check.result == 'success' && needs.pipeline-dry-run.result == 'success' }}
      run: |
        echo "✅ All CI checks passed!"
        echo "Pipeline is ready for use"
        
    - name: Notify failure
      if: ${{ needs.docker-build.result == 'failure' || needs.validate-scripts.result == 'failure' || needs.docs-check.result == 'failure' || needs.pipeline-dry-run.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        echo "Please review the failed jobs above"
        exit 1
